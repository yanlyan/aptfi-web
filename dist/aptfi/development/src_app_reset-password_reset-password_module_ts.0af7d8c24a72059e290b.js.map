{"version":3,"sources":["./src/app/core/error-state.matcher.ts","./src/app/reset-password/reset-password.component.ts","./src/app/reset-password/reset-password.component.html","./src/app/reset-password/reset-password.module.ts","./src/app/reset-password/reset-password.service.ts"],"names":[],"mappings":"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","file":"src_app_reset-password_reset-password_module_ts.0af7d8c24a72059e290b.js","sourcesContent":["import { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\nimport { ErrorStateMatcher } from \"@angular/material/core\";\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const invalidCtrl = !!(control?.invalid && control?.parent?.dirty);\n    const invalidParent = !!(control?.parent?.invalid && control?.parent?.dirty);\n\n    return invalidCtrl || invalidParent;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ReCaptchaService } from 'angular-recaptcha3';\nimport { MyErrorStateMatcher } from '../core/error-state.matcher';\nimport { ResetPasswordService } from './reset-password.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss'],\n})\nexport class ResetPasswordComponent implements OnInit {\n  resetForm: FormGroup;\n  loading: boolean = false;\n\n  matcher = new MyErrorStateMatcher();\n\n  checkPasswords: ValidatorFn = (group: AbstractControl): ValidationErrors | null => {\n    let pass = group.get('password').value;\n    let confirmPass = group.get('passwordConfirmation').value;\n    return pass === confirmPass ? null : { notSame: true };\n  };\n\n  constructor(\n    private resetPasswordService: ResetPasswordService,\n    private snackbar: MatSnackBar,\n    private route: ActivatedRoute,\n    private router: Router,\n    private recaptchaService: ReCaptchaService\n  ) {}\n\n  ngOnInit(): void {\n    this.resetForm = new FormGroup(\n      {\n        token: new FormControl(null, [Validators.required]),\n        password: new FormControl(null, [Validators.required]),\n        passwordConfirmation: new FormControl(null, [Validators.required]),\n      },\n      {\n        validators: this.checkPasswords,\n      }\n    );\n    this.route.params.subscribe((params) => {\n      if (params.token) {\n        this.resetForm.controls['token'].setValue(params.token);\n      }\n    });\n  }\n\n  async onSubmit() {\n    if (this.resetForm.valid) {\n      this.loading = true;\n      const token = await this.recaptchaService.execute({ action: 'reset' });\n      const params = this.resetForm.value;\n      params.recaptcha = token;\n      console.log(params);\n      this.resetPasswordService.resetPassword(params).subscribe(\n        (response) => {\n          this.snackbar\n            .open('Password berhasil diubah', 'Tutup', {\n              duration: 5000,\n              panelClass: ['snackbar-success'],\n            })\n            .afterDismissed()\n            .subscribe((e) => {\n              this.router.navigate(['login']);\n            });\n          this.loading = false;\n        },\n        (err) => {\n          this.loading = false;\n        }\n      );\n    }\n  }\n}\n","<div\n  fxLayout=\"column\"\n  fxLayoutGap=\"32px\"\n  fxLayoutAlign=\"start center\"\n  style=\"height: 100%; background-color: #ddd; padding-top: 64px\"\n>\n  <div style=\"text-align: center\">\n    <img style=\"width: 70%\" src=\"assets/image/logo2.png\" alt=\"\" />\n  </div>\n  <mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <mat-card-title style=\"margin: 24px 0px\">Masukkan email anda untuk melakukan reset password</mat-card-title>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center stretch\">\n      <form\n        [formGroup]=\"resetForm\"\n        (submit)=\"onSubmit()\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"start stretch\"\n        fxLayoutGap=\"8px\"\n        style=\"margin: 0px 16px\"\n      >\n        <mat-form-field>\n          <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" />\n          <mat-error *ngIf=\"!!resetForm.get('password')?.hasError('required')\">Password harus diisi</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input\n            matInput\n            placeholder=\"Konfirmasi Password\"\n            formControlName=\"passwordConfirmation\"\n            type=\"password\"\n            [errorStateMatcher]=\"matcher\"\n          />\n          <mat-error *ngIf=\"!!resetForm.get('passwordConfirmation')?.hasError('required')\"\n            >Konfirmasi Password harus diisi</mat-error\n          >\n          <mat-error *ngIf=\"!!resetForm.get('passwordConfirmation')?.hasError('notSame')\"\n            >Password tidak sama</mat-error\n          >\n        </mat-form-field>\n        <div>\n          <div style=\"margin-top: 20px; padding-bottom: 20px\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n            <button *ngIf=\"!loading\" mat-raised-button color=\"primary\" type=\"submit\" fxFlex=\"33\">\n              Kirim link reset\n            </button>\n            <div *ngIf=\"loading\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"8px\">\n              <mat-spinner color=\"primary\" [diameter]=\"20\"></mat-spinner>\n              <label for=\"\">Loading</label>\n            </div>\n          </div>\n          <recaptcha [size]=\"'invisible'\" [hide]=\"true\"> </recaptcha>\n\n          <mat-divider></mat-divider>\n        </div>\n      </form>\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"margin-top: 24px; width: 100%\">\n        <div>\n          <a routerLink=\"/register\">Daftar akun?</a>\n        </div>\n        <div>\n          <a routerLink=\"/login\">Masuk ke Akun</a>\n        </div>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginGuard } from '../login/login.guard';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ReCaptchaModule } from 'angular-recaptcha3';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordComponent,\n    canActivate: [LoginGuard],\n  },\n];\n\n@NgModule({\n  declarations: [ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    MatCardModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FlexLayoutModule,\n    MatDividerModule,\n    ReactiveFormsModule,\n    MatProgressSpinnerModule,\n    ReCaptchaModule,\n  ],\n})\nexport class ResetPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClientService } from '../core/http-client.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResetPasswordService {\n  constructor(private httpClient: HttpClientService) {}\n\n  resetPassword(params:any){\n    return this.httpClient.post(`${environment.api}/reset-password`,params);\n  }\n}\n"],"sourceRoot":"webpack:///"}