{"version":3,"sources":["./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/register/register.module.ts","./src/app/register/register.service.ts"],"names":[],"mappings":"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","file":"src_app_register_register_module_ts.c3f47b0e49b7646960cf.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { ReCaptchaService } from 'angular-recaptcha3';\nimport { SetSessionState } from '../app.state';\nimport { MustMatch } from '../core/must-match.validator';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  loginForm: FormGroup;\n  loading = false;\n\n  constructor(\n    private registerService: RegisterService,\n    private readonly store: Store,\n    private router: Router, // private readonly store: Store\n    private fb: FormBuilder,\n    private recaptchaService: ReCaptchaService\n  ) {\n    this.loginForm = this.fb.group(\n      {\n        name: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required]],\n        passwordConfirmation: ['', [Validators.required]],\n      },\n      {\n        validators: MustMatch('password', 'passwordConfirmation'),\n      }\n    );\n  }\n\n  mustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n        return;\n      }\n\n      // set error on matchingControl if validation fails\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    };\n  }\n\n  ngOnInit(): void {}\n\n  async onSubmit() {\n    if (this.loginForm.valid) {\n      this.loading = true;\n      const token = await this.recaptchaService.execute({ action: 'register' });\n\n      this.registerService\n        .register(\n          this.loginForm.value.name,\n          this.loginForm.value.email,\n          this.loginForm.value.password,\n          this.loginForm.value.passwordConfirmation,\n          token\n        )\n        .subscribe(\n          (response) => {\n            this.store.dispatch(\n              new SetSessionState({\n                accessToken: response.access_token,\n                refreshToken: response.refresh_token,\n                role: response.user.role,\n              })\n            );\n            this.router.navigate(['/']);\n            this.loading = false;\n          },\n          (error) => {\n            this.loading = false;\n          }\n        );\n    }\n  }\n\n  goToRegister() {\n    this.router.navigate(['daftar']);\n  }\n}\n","<div\n  fxLayout=\"column\"\n  fxLayoutGap=\"32px\"\n  fxLayoutAlign=\"start center\"\n  style=\"height: 100%; background-color: #ddd; padding-top: 64px\"\n>\n  <div style=\"text-align: center\">\n    <img style=\"width: 70%\" src=\"assets/image/logo2.png\" alt=\"\" />\n  </div>\n  <mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <mat-card-title style=\"margin: 24px 0px\">Daftar akun ke Sistem Keanggotaan APTFI</mat-card-title>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center stretch\">\n      <form\n        [formGroup]=\"loginForm\"\n        (submit)=\"onSubmit()\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"start stretch\"\n        fxLayoutGap=\"8px\"\n        style=\"margin: 0px 16px\"\n      >\n        <mat-form-field>\n          <input matInput placeholder=\"Nama Universitas\" formControlName=\"name\" type=\"text\" />\n          <mat-error *ngIf=\"!!loginForm.get('name')?.hasError('required')\">Nama Universitas harus diisi</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput placeholder=\"Email Universitas\" formControlName=\"email\" type=\"email\" />\n          <mat-error *ngIf=\"!!loginForm.get('email')?.hasError('required')\">Email Universitas harus diisi</mat-error>\n          <mat-error *ngIf=\"!!loginForm.get('email')?.hasError('email')\">Email Universitas tidak valid</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" />\n          <mat-error>Password harus diisi</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput placeholder=\"Ulangi Password\" formControlName=\"passwordConfirmation\" type=\"password\" />\n          <mat-error>Ulangi Password harus sama dengan password</mat-error>\n        </mat-form-field>\n        <div>\n          <div style=\"margin-top: 20px; padding-bottom: 20px\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n            <button *ngIf=\"!loading\" mat-raised-button color=\"primary\" type=\"submit\">Buat Akun Baru</button>\n            <div *ngIf=\"loading\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"8px\">\n              <mat-spinner color=\"primary\" [diameter]=\"20\"></mat-spinner>\n              <label for=\"\">Loading</label>\n            </div>\n          </div>\n          <recaptcha [size]=\"'invisible'\" [hide]=\"true\"> </recaptcha>\n\n          <mat-divider></mat-divider>\n        </div>\n      </form>\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"margin-top: 24px; width: 100%\">\n        <div>\n          <a routerLink=\"/login\">Masuk ke akun</a>\n        </div>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RegisterComponent } from '../register/register.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ReCaptchaModule } from 'angular-recaptcha3';\nimport { LoginGuard } from '../login/login.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterComponent,\n    canActivate: [LoginGuard],\n  },\n];\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    MatCardModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    FlexLayoutModule,\n    MatInputModule,\n    MatDividerModule,\n    ReactiveFormsModule,\n    MatProgressSpinnerModule,\n    ReCaptchaModule,\n  ],\n})\nexport class RegisterModule {}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClientService } from '../core/http-client.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterService {\n  constructor(private httpClient: HttpClientService) {}\n\n  register(name: string, email: string, password: string, passwordConfirm: string, token: string) {\n    return this.httpClient.post(`${environment.api}/register`, {\n      name,\n      email,\n      password,\n      password_confirmation: passwordConfirm,\n      recaptcha: token,\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}