{"version":3,"file":"src_app_register_register_module_ts.js","mappings":"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","sources":["./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/register/register.module.ts","./src/app/register/register.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { ReCaptchaService } from 'angular-recaptcha3';\nimport { SetSessionState } from '../app.state';\nimport { MustMatch } from '../core/must-match.validator';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  loginForm: FormGroup;\n  loading = false;\n\n  constructor(\n    private registerService: RegisterService,\n    private readonly store: Store,\n    private router: Router, // private readonly store: Store\n    private fb: FormBuilder,\n    private recaptchaService: ReCaptchaService\n  ) {\n    this.loginForm = this.fb.group(\n      {\n        name: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required]],\n        passwordConfirmation: ['', [Validators.required]],\n      },\n      {\n        validators: MustMatch('password', 'passwordConfirmation'),\n      }\n    );\n  }\n\n  mustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n        return;\n      }\n\n      // set error on matchingControl if validation fails\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    };\n  }\n\n  ngOnInit(): void {}\n\n  async onSubmit() {\n    if (this.loginForm.valid) {\n      this.loading = true;\n      const token = await this.recaptchaService.execute({ action: 'register' });\n\n      this.registerService\n        .register(\n          this.loginForm.value.name,\n          this.loginForm.value.email,\n          this.loginForm.value.password,\n          this.loginForm.value.passwordConfirmation,\n          token\n        )\n        .subscribe(\n          (response) => {\n            this.store.dispatch(\n              new SetSessionState({\n                accessToken: response.access_token,\n                refreshToken: response.refresh_token,\n                role: response.user.role,\n              })\n            );\n            this.router.navigate(['/']);\n            this.loading = false;\n          },\n          (error) => {\n            this.loading = false;\n          }\n        );\n    }\n  }\n\n  goToRegister() {\n    this.router.navigate(['daftar']);\n  }\n}\n","<div\n  fxLayout=\"column\"\n  fxLayoutGap=\"32px\"\n  fxLayoutAlign=\"start center\"\n  style=\"height: 100%; background-color: #ddd; padding-top: 64px\"\n>\n  <div style=\"text-align: center\">\n    <img style=\"width: 70%\" src=\"assets/image/logo2.png\" alt=\"\" />\n  </div>\n  <mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"margin: 0 16px\">\n      <mat-card-title style=\"margin: 24px 0px\">Daftar akun ke Sistem Keanggotaan APTFI</mat-card-title>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center stretch\">\n      <form\n        [formGroup]=\"loginForm\"\n        (submit)=\"onSubmit()\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"start stretch\"\n        fxLayoutGap=\"8px\"\n        style=\"margin: 0px 16px\"\n      >\n        <mat-form-field>\n          <input matInput placeholder=\"Nama Universitas\" formControlName=\"name\" type=\"text\" />\n          <mat-error *ngIf=\"!!loginForm.get('name')?.hasError('required')\">Nama Universitas harus diisi</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput placeholder=\"Email Universitas\" formControlName=\"email\" type=\"email\" />\n          <mat-error *ngIf=\"!!loginForm.get('email')?.hasError('required')\">Email Universitas harus diisi</mat-error>\n          <mat-error *ngIf=\"!!loginForm.get('email')?.hasError('email')\">Email Universitas tidak valid</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" />\n          <mat-error>Password harus diisi</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput placeholder=\"Ulangi Password\" formControlName=\"passwordConfirmation\" type=\"password\" />\n          <mat-error>Ulangi Password harus sama dengan password</mat-error>\n        </mat-form-field>\n        <div>\n          <div style=\"margin-top: 20px; padding-bottom: 20px\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n            <button *ngIf=\"!loading\" mat-raised-button color=\"primary\" type=\"submit\">Buat Akun Baru</button>\n            <div *ngIf=\"loading\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"8px\">\n              <mat-spinner color=\"primary\" [diameter]=\"20\"></mat-spinner>\n              <label for=\"\">Loading</label>\n            </div>\n          </div>\n          <recaptcha [size]=\"'invisible'\" [hide]=\"true\"> </recaptcha>\n\n          <mat-divider></mat-divider>\n        </div>\n      </form>\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"margin-top: 24px; width: 100%\">\n        <div>\n          <a routerLink=\"/login\">Masuk ke akun</a>\n        </div>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RegisterComponent } from '../register/register.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ReCaptchaModule } from 'angular-recaptcha3';\nimport { LoginGuard } from '../login/login.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterComponent,\n    canActivate: [LoginGuard],\n  },\n];\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    MatCardModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    FlexLayoutModule,\n    MatInputModule,\n    MatDividerModule,\n    ReactiveFormsModule,\n    MatProgressSpinnerModule,\n    ReCaptchaModule,\n  ],\n})\nexport class RegisterModule {}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClientService } from '../core/http-client.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterService {\n  constructor(private httpClient: HttpClientService) {}\n\n  register(name: string, email: string, password: string, passwordConfirm: string, token: string) {\n    return this.httpClient.post(`${environment.api}/register`, {\n      name,\n      email,\n      password,\n      password_confirmation: passwordConfirm,\n      recaptcha: token,\n    });\n  }\n}\n"],"names":["Validators","SetSessionState","MustMatch","i0","RegisterComponent","constructor","registerService","store","router","fb","recaptchaService","loginForm","group","name","required","email","password","passwordConfirmation","validators","mustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","value","setErrors","ngOnInit","onSubmit","valid","loading","token","execute","action","register","subscribe","response","dispatch","accessToken","access_token","refreshToken","refresh_token","role","user","navigate","error","goToRegister","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"webpack:///"}